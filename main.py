print("OpenHavroniya\n      by Andrey Daniluk and TideSoft!\nLoading...")
print("Import modules...")
import os, os.path, sys, random, sqlite3, configparser, threading, time, telebot, string
from datetime import timedelta
from telebot import types
from uptime import uptime
os.system("title OpenHavroniya Telegram server")
print("Connect to database...")
conn = sqlite3.connect('db.sqlite', check_same_thread=False)
cursor = conn.cursor()
lock = threading.Lock()
cursor.execute("CREATE TABLE IF NOT EXISTS openhavroniya (inttxt, outtxt)")
cursor.execute("CREATE TABLE IF NOT EXISTS openhavroniya_photo (inttxt, outtxt, photo)")
cursor.execute("CREATE TABLE IF NOT EXISTS openhavroniya_block_users (userid, reason, block_date, first_name, last_name, by_admin)")
cursor.execute("CREATE TABLE IF NOT EXISTS openhavroniya_block_chats (chat_id, reason, chat_name, block_date, by_admin)")
cursor.execute("CREATE TABLE IF NOT EXISTS openhavroniya_admins (userid)")
conn.commit()
cursor.execute("SELECT * FROM openhavroniya_admins")
if cursor.fetchall() == []:
    print("Error: Admin list are empty. Please, enter your user id")
    finish = False
    while finish == False:
        adminid = input("User id> ")
        try:
            adminid_int = int(adminid)
        except:
            print("Error: The user id must only consist of digits without a negative sign")
        else:
            if adminid_int > 0:
                if "." in adminid:
                    print("Error: The user id must only consist of digits without a negative sign")
                else:
                    finish = True
            else:
                print("Error: The user id must only consist of digits without a negative sign")
    cursor.execute(f"INSERT INTO openhavroniya_admins (userid) VALUES ('{adminid}')")
    conn.commit()
print("Preparing no_photo.png...")
if not os.path.exists("no_photo.png"):
    print("ERROR: File no_photo.png not found. Please download it from repository, or paste your photo with name \"no_photo.png\"")
    exit()
else:
    no_photo = open("no_photo.png", "rb").read()
print("Inzialite variables...")
errors_count = 0
new_replys = 0
messages_get = 0
photo_new_replys = 0
sends_replys = 0
sends_photos = 0
deleted_replys = 0
replys_visited = 0
bannedusertext = "–£–≤—ã, –Ω–æ –≤—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {reason}\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤ t.me/andrey_daniluk"
print("Inzialite functions")
def dbexec(command, save=True, additional_parameters=None):
    try:
        lock.acquire(True)
        if additional_parameters == None:
            cursor.execute(command)
        else:
            cursor.execute(command, additional_parameters)
    finally:
        lock.release()
    if save == True:
        conn.commit()
    return cursor.fetchall()

class bm:
    memory = {}

    def get(button_code):
        try:
            text_from_code = bm.memory[button_code]
        except:
            return None
        else:
            return text_from_code
        
    def new(memory_text):
        pas = False
        while pas == False:
            letters_and_digits = string.ascii_letters + string.digits
            rand_string = ''.join(random.sample(letters_and_digits, 40))
            try:
                bm.memory[rand_string]
            except:
                pas = True
        bm.memory[rand_string] = memory_text
        return rand_string

    def delete(button_code):
        try:
            del bm.memory[button_code]
        except:
            return 0;
        return 0;

print("Inzialite libs to work...")
start_time = time.time()
config = configparser.ConfigParser()
if not os.path.exists("./photo-memory/"):
    os.makedirs("./photo-memory/")
if not os.path.exists("config.ini"):
    print("Error: Config not found. Let`s to create it!")
    intk = input("Your TG token: ")
    with open("config.ini", "w") as wicicnf:
        wicicnf.write("[tg]\ntoken = " + intk)
config.read("config.ini")
bot = telebot.TeleBot(config.get("tg", "token"), parse_mode=None)


print("Inzialite telebot commands, and try to start bot")


@bot.message_handler(commands=['admin'])
def adminpanel(message):
    bot.send_chat_action(message.chat.id, 'typing')
    adminslist = dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'")
    if adminslist != []:

        adminscount = len(dbexec(f"SELECT userid FROM openhavroniya_admins"))
        blocked_user_count = len(dbexec(f"SELECT userid FROM openhavroniya_block_users"))
        blocked_chat_count = len(dbexec(f"SELECT chat_id FROM openhavroniya_block_chats"))

        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=bm.new("settings")))
        keyboard.row(types.InlineKeyboardButton(text="üí¨ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ —á–∞—Ç—ã", callback_data=bm.new("blocked_chats")))
        keyboard.row(types.InlineKeyboardButton(text="üë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=bm.new("blocked_users")))
        bot.reply_to(message, f"üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\nüë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {blocked_user_count}—à—Ç.\nüí¨ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ —á–∞—Ç—ã: {blocked_chat_count}—à—Ç.\nüëÆ‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {adminscount}—à—Ç.", reply_markup=keyboard)
    else:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    calldatacode = call.data

    calldatatext = bm.get(calldatacode)

    if calldatatext == None:
        bot.answer_callback_query(callback_query_id=call.id, text='–ö–æ–¥ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –Ω–∞ –Ω–µ—ë –Ω–∞–∂–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞')
        return 0;
    call.data = calldatatext
    rmbc = True
    if call.message:
        bot.send_chat_action(call.message.chat.id, 'typing')
        adminslist = dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{call.from_user.id}'")
        if call.data == "f":
            rmbc = False
            bot.answer_callback_query(callback_query_id=call.id, text="üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ. –ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ Python, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å –µ—ë.", show_alert=True)
        
        if call.data.startswith("images:list:"):
            query = call.data.split(":", maxsplit=2)[-1]
            photolist = dbexec("SELECT photo, outtxt FROM openhavroniya_photo WHERE inttxt=?", additional_parameters=[(query)])
            if photolist == []:
                bot.edit_message_media(chat_id=call.message.chat.id,message_id=call.message.message_id,media=types.InputMediaPhoto(no_photo))
                bot.bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=str(f"–ù–∞–π—Ç–∏ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–µ —É–¥–∞–ª–æ—Å—å. –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ–≥–æ —É–∂–µ —É–¥–∞–ª–∏–ª–∏, –∏–ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫."), reply_markup=None)
            else:
                keyboard = types.InlineKeyboardMarkup()
                for photo in photolist:
                    keyboard.row(types.InlineKeyboardButton(str(photo[0]), callback_data=bm.new("show:image:"+photo[0]+":"+query)))
                bot.edit_message_media(chat_id=call.message.chat.id,message_id=call.message.message_id,media=types.InputMediaPhoto(no_photo))
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=str(f"–í–æ—Ç —á—Ç–æ –Ω–∞–π—à–ª–∞ –∏–∑ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\":"), reply_markup=keyboard)

        if call.data.startswith("show:image:"):
            print(call.data)
            filenameandquery = call.data.split(":",maxsplit=2)[-1]
            print(filenameandquery)
            filename = filenameandquery.split(":",maxsplit=1)[0]
            print(filename)
            query = filenameandquery.split(":",maxsplit=1)[1]
            print(query)

            keyboard = types.InlineKeyboardMarkup()
            if dbexec(f"SELECT * FROM openhavroniya_photo WHERE photo='{filename}'") == []:
                keyboard.row(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=bm.new("images:list:"+query)))
                bot.edit_message_media(chat_id=call.message.chat.id,message_id=call.message.message_id,media=types.InputMediaPhoto(no_photo))
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"üö´ –£–ø—Å... –ü–æ—Ö–æ–¥—É —ç—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=keyboard)
            else:
                res_text = dbexec(f"SELECT outtxt FROM openhavroniya_photo WHERE photo='{filename}'")

                if res_text == []:
                    res_text = "–ö —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                else:
                    if res_text[0][0] == "" or res_text[0][0] == " ":
                        res_text = "–ö —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                    else:
                        res_text = "–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω—ã–π —Ç–µ–∫—Å—Ç: " + str(res_text[0][0])

                keyboard.row(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=bm.new("images:list:"+query)))
                keyboard.row(types.InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å", callback_data=bm.new("delete:image:"+filename+":"+query)))
                bot.edit_message_media(chat_id=call.message.chat.id,message_id=call.message.message_id,media=types.InputMediaPhoto(open("photo-memory/"+filename,"rb").read()))
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"–ó–∞–ø—Ä–æ—Å: {query}\n{res_text}", reply_markup=keyboard)

        if call.data.startswith("delete:image:"):
            filenameandquery = call.data.split(":",maxsplit=2)[-1]
            filename = filenameandquery.split(":",maxsplit=1)[0]
            query = filenameandquery.split(":",maxsplit=1)[1]
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=bm.new("images:list:"+query)))
            if dbexec(f"SELECT * FROM openhavroniya_photo WHERE photo='{filename}'") == []:
                bot.edit_message_media(chat_id=call.message.chat.id,message_id=call.message.message_id,media=types.InputMediaPhoto(no_photo))
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"üö´ –£–ø—Å... –ü–æ—Ö–æ–¥—É —ç—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=keyboard)
            else:
                os.remove("photo-memory/"+filename)
                dbexec("DELETE FROM openhavroniya_photo WHERE photo=?", additional_parameters=[(filename)])
                bot.edit_message_media(chat_id=call.message.chat.id,message_id=call.message.message_id,media=types.InputMediaPhoto(no_photo))
                bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"üö´ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=keyboard)


        if call.data == "main":
            if adminslist != []:
                adminscount = len(dbexec(f"SELECT userid FROM openhavroniya_admins"))
                blocked_user_count = len(dbexec(f"SELECT userid FROM openhavroniya_block_users"))
                blocked_chat_count = len(dbexec(f"SELECT chat_id FROM openhavroniya_block_chats"))
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=bm.new("settings")))
                keyboard.row(types.InlineKeyboardButton(text="üí¨ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ —á–∞—Ç—ã", callback_data=bm.new("blocked_chats")))
                keyboard.row(types.InlineKeyboardButton(text="üë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=bm.new("blocked_users")))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\nüë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {blocked_user_count}—à—Ç.\nüí¨ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ —á–∞—Ç—ã: {blocked_chat_count}—à—Ç.\nüëÆ‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {adminscount}—à—Ç.", reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data == "settings":
            if adminslist != []:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("main")))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data.startswith("blocked-chat-"):
            if adminslist != []:
                bc = call.data.replace("blocked-chat-", "")
                keyboard = types.InlineKeyboardMarkup()
                if dbexec(f"SELECT * FROM openhavroniya_block_chats WHERE chat_id=\"{bc}\"") != []:
                    bci = dbexec(f"SELECT * FROM openhavroniya_block_chats WHERE chat_id=\"{bc}\"")[0]
                    keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("blocked_chats")))
                    keyboard.row(types.InlineKeyboardButton(text="üö´ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=bm.new(f"chat_unblock_{bc}")))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=str(f"üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ–º —á–∞—Ç–µ {bc}:\n\nüÜî ID —á–∞—Ç–∞: {bc}\nüè∑ –ò–º—è —á–∞—Ç–∞: {bci[2]}\nüìã –ü—Ä–∏—á–∏–Ω–∞: {bci[1]}\nüïí –í—Ä–µ–º—è –±–∞–Ω–∞: {bci[3]}\nüëÆ‚Äç‚ôÇ –ó–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º: {bci[4]}"), reply_markup=keyboard)
                else:
                    keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("blocked_chats")))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üí¨ –ß–∞—Ç —Å id {bc} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç —á–∞—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã –Ω–∞–∂–∞–ª–∏ —Å—é–¥–∞', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data == "blocked_chats":
            if adminslist != []:
                keyboard = types.InlineKeyboardMarkup()
                for chatlist in dbexec("SELECT * FROM openhavroniya_block_chats"):
                    keyboard.row(types.InlineKeyboardButton(text=f"{chatlist[0]} ({chatlist[2]})", callback_data=bm.new(f"blocked-chat-{chatlist[0]}")))
                keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("main")))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üí¨ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ —á–∞—Ç—ã', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data == "blocked_users":
            if adminslist != []:
                keyboard = types.InlineKeyboardMarkup()
                for userlist in dbexec("SELECT * FROM openhavroniya_block_users"):
                    keyboard.row(types.InlineKeyboardButton(text=f"{userlist[0]} ({userlist[3]} {userlist[4]})", callback_data=bm.new(f"blocked-user-{userlist[0]}")))
                keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("main")))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data.startswith("blocked-user-"):
            if adminslist != []:
                guid = call.data.replace("blocked-user-","")
                bui = dbexec(f"SELECT * FROM openhavroniya_block_users WHERE userid='{guid}'")[0]
                if bui != []:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("blocked_users")))
                    keyboard.row(types.InlineKeyboardButton(text="üö´ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=bm.new(f"user_unblock_{guid}")))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ {guid} –Ω–∞ –º–æ–º–µ–Ω—Ç –±–∞–Ω–∞:\n\nüè∑ –ò–º—è: {bui[3]}\nüè∑ –§–∞–º–∏–ª–∏—è: {bui[4]}\nüïí –í—Ä–µ–º—è –±–∞–Ω–∞: {bui[2]}\nüìã –ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {bui[1]}\nüëÆ‚Äç‚ôÇ –ó–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º: {bui[5]}', reply_markup=keyboard)
                else:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("blocked_users")))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {guid} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data.startswith("user_unblock_"):
            if adminslist != []:
                guid = call.data.replace("user_unblock_","")
                dbexec(f"DELETE FROM openhavroniya_block_users WHERE userid='{guid}'")
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("blocked_users")))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if call.data.startswith("chat_unblock_"):
            if adminslist != []:
                guid = call.data.replace("chat_unblock_","")
                dbexec(f"DELETE FROM openhavroniya_block_chats WHERE chat_id='{guid}'")
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(types.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=bm.new("blocked_chats")))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üö´ –ß–∞—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', reply_markup=keyboard)
            else:
                rmbc = False
                bot.answer_callback_query(callback_query_id=call.id, text=f'üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', show_alert=True)

        if rmbc == True:
            bm.delete(calldatacode)

@bot.message_handler(commands=['chatinfo'])
def sysinfo(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    bot.reply_to(message,f"""
üìî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –û–ø–µ–Ω–•–∞–≤—Ä–æ–Ω–∏–∏:

üÜî ID —á–∞—Ç–∞: {message.chat.id}
üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {message.id}—à—Ç.
""")

@bot.message_handler(commands=['setadmin'])
def setadmin(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'") != []:
        if message.reply_to_message != None:
            if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.reply_to_message.from_user.id}'") == []:
                dbexec(f"INSERT INTO openhavroniya_admins (userid) VALUES ('{message.reply_to_message.from_user.id}')") 
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            else:
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        else:
            userid = message.text.split(maxsplit=1)[1]
            try:
                int(userid)
            except:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{userid}'") == []:
                    dbexec(f"INSERT INTO openhavroniya_admins (userid) VALUES ('{userid}')") 
                    bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
                else:
                    bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∞–¥–º–∏–Ω–æ–º")

@bot.message_handler(commands=['userunban'])
def removeadmin(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'") != []:
        if message.reply_to_message != None:
            if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.reply_to_message.from_user.id}'") != []:
                dbexec(f"DELETE FROM openhavroniya_block_users WHERE userid='{message.reply_to_message.from_user.id}'")
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            else:
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ.")
        else:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.message_handler(commands=['chatban'])
def chatban(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'") != []:
        mt = message.text.split("\n", maxsplit=1)
        if "\n" in message.text:
            reason = mt[1]
        else:
            reason = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if mt[0] == "/chatban":
            chat_name = message.chat.title
            chat_id = str(message.chat.id)
        else:
            chat_name = "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
            chat_id = mt[0].split(maxsplit=1)[1]
        if dbexec(f"SELECT chat_id FROM openhavroniya_block_chats WHERE chat_id='{chat_id}'") != []:
            bot.reply_to(message, "–≠—Ç–æ—Ç —á–∞—Ç –∏ —Ç–∞–∫ –∑–∞–±–∞–Ω–µ–Ω")
            return 0;
        blockdate = time.strftime("%d/%m/%y %H:%M:%S")
        dbexec(f"INSERT INTO openhavroniya_block_chats (chat_id, reason, chat_name, block_date, by_admin) VALUES (\"{chat_id}\", ?,\"{chat_name}\",\"{blockdate}\",\"{message.from_user.id}\")", additional_parameters=[(reason)])
        bot.reply_to(message, "–ß–∞—Ç –∑–∞–±–∞–Ω–µ–Ω")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç.")

@bot.message_handler(commands=['userban'])
def removeadmin(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'") != []:
        if message.reply_to_message != None:
            if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.reply_to_message.from_user.id}'") == []:
                if " " in message.text:
                    reason = message.text.split(maxsplit=1)[1]
                else:
                    reason = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                if message.reply_to_message.from_user.first_name != None:
                    first_name = message.reply_to_message.from_user.first_name
                else:
                    first_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                if message.reply_to_message.from_user.last_name != None:
                    last_name = message.reply_to_message.from_user.last_name
                else:
                    last_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                blockdate = time.strftime("%d/%m/%y %H:%M:%S")
                dbexec(f"INSERT INTO openhavroniya_block_users (userid, reason, block_date, first_name, last_name, by_admin) VALUES ('{message.reply_to_message.from_user.id}', ?, '{blockdate}', ?, ?,'{message.from_user.id}')", additional_parameters=[(reason),(first_name),(last_name)])
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            else:
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –∑–∞–±–∞–Ω–µ–Ω.")
        else:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.message_handler(commands=['removeadmin'])
def removeadmin(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'") != []:
        if message.reply_to_message != None:
            if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.reply_to_message.from_user.id}'") != []:
                dbexec(f"DELETE FROM openhavroniya_admins WHERE userid='{message.reply_to_message.from_user.id}'") 
                bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            else:
                bot.reply_to(message, "–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        else:
            userid = message.text.split(maxsplit=1)[1]
            try:
                int(userid)
            except:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                if dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{userid}'") != []:
                    dbexec(f"DELETE FROM openhavroniya_admins WHERE userid='{userid}'") 
                    bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                else:
                    bot.reply_to(message, "–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

@bot.message_handler(commands=['info'])
def sysinfo(message):
    if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'") != []:
        reason = dbexec(f"SELECT reason FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'")
        bot.reply_to(message, bannedusertext.replace("{reason}", reason[0][0]))
        return 0;
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    bot_upt = timedelta(seconds=round(time.time() - start_time, 0))
    serv_upt = timedelta(seconds=round(uptime(), 0))
    bot.reply_to(message,f"""
üìî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –û–ø–µ–Ω–•–∞–≤—Ä–æ–Ω–∏–∏:

üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {bot_upt}
üïò –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: {serv_upt}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {errors_count}—à—Ç.
‚ûï –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {new_replys}—à—Ç.
‚ùå –£–¥–∞–ª—ë–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {deleted_replys}—à—Ç.
üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_get}—à—Ç.
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {replys_visited}—à—Ç.
‚ûï –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ñ–æ—Ç–æ: {photo_new_replys}—à—Ç.
üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {sends_replys}—à—Ç.
üñº –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã—Ö —Ñ–æ—Ç–æ: {sends_photos}—à—Ç.
        """)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç, —è - –û–ø–µ–Ω–•–∞–≤—Ä–æ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å/–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help')

@bot.message_handler(commands=["db"])
def help(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    adminslist = dbexec(f"SELECT userid FROM openhavroniya_admins WHERE userid='{message.from_user.id}'")
    if adminslist != []:
        if not " " in message.text:
            bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: /db SELECT * FROM openhavroniya")
        else:
            command = message.text.split(maxsplit=1)[1]
            try:
                bot.reply_to(message, "–í—ã–≤–æ–¥: " + str(dbexec(command)))
            except Exception as e:
                bot.reply_to(message, "–û—à–∏–±–∫–∞: " + str(e))
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(commands=["photo-reply"])
def phr(message):
    if not " " in message.text:
        bot.reply_to(message, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É.")
    else:
        query = message.text.split(maxsplit=1)[1].lower()
        photolist = dbexec("SELECT photo, outtxt FROM openhavroniya_photo WHERE inttxt=?", additional_parameters=[(query)])
        if photolist == []:
            bot.reply_to(message, f"–ù–∞–π—Ç–∏ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–µ —É–¥–∞–ª–æ—Å—å. –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ–≥–æ —É–∂–µ —É–¥–∞–ª–∏–ª–∏, –∏–ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.")
        else:
            keyboard = types.InlineKeyboardMarkup()
            for photo in photolist:
                keyboard.row(types.InlineKeyboardButton(str(photo[0]), callback_data=bm.new("show:image:"+photo[0]+":"+query)))
            bot.send_photo(message.chat.id, no_photo, reply_to_message_id=message.message_id, caption=str(f"–í–æ—Ç —á—Ç–æ –Ω–∞–π—à–ª–∞ –∏–∑ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\":"), reply_markup=keyboard)

@bot.message_handler(commands=["help"])
def help(message):
    bot.send_chat_action(message.chat.id, 'typing')
    global messages_get
    messages_get += 1
    bot.reply_to(message, "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n\n–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:\n/create-reply 300\n–û—Ç—Å–æ—Å–∏ —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞!\n\n –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å: /reply 300\n\n–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n/delete-reply 300\n –û—Ç—Å–æ—Å–∏ —É —Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞!")

@bot.message_handler(content_types="photo")
def phrepl(message):
    global messages_get
    global photo_new_replys
    messages_get += 1
    if message.caption != None:
        if message.caption.startswith("/create-reply "):
            if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'") == []:
                bot.send_chat_action(message.chat.id, 'typing')
                if "\n" in message.caption:
                    wtext = message.caption.replace("/create-reply ", "").split("\n")[0].lower()
                    wttext = message.caption.split("\n")[1]
                else:
                    wtext = message.caption.replace("/create-reply ", "").split("\n")[0].lower()
                    wttext = ""

                photoid = 'img-' + time.strftime("%Y%m%d%H%M%S") + '-' + str(random.randint(1,999)) + '.jpg'
                with open("./photo-memory/" + photoid, "wb") as out:
                    out.write(bot.download_file(bot.get_file(message.photo[-1].file_id).file_path))
                dbexec("INSERT INTO openhavroniya_photo (inttxt, outtxt, photo) VALUES (?, ?, ?)", additional_parameters=[(wtext),(wttext),(photoid)])
                photo_new_replys += 1
                bot.reply_to(message, "–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ!")
            else:
                reason = dbexec(f"SELECT reason FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'")
                bot.reply_to(message, bannedusertext.replace("{reason}", reason[0][0]))
                return 0;

@bot.message_handler(content_types="text")
def antxt(message):
    global errors_count
    global new_replys
    global messages_get
    global photo_new_replys
    global sends_replys
    global sends_photos
    global deleted_replys
    global replys_visited
    messages_get += 1
    if message.text.startswith("/reply "):
        bot.send_chat_action(message.chat.id, 'typing')
        if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'") == []:
            replys_visited += 1
            reqoutp = message.text.replace("/reply ", "").lower()
            outpt = ""
            outp = dbexec("SELECT outtxt FROM 'openhavroniya' WHERE inttxt=?", additional_parameters=[(reqoutp)])
            for i in outp:
                ii = i[0]
                outpt = outpt + str(ii) + "\n"
            if str(outpt) != "":
                bot.reply_to(message, str("–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º \"" + reqoutp + "\" (" + str(len(outp)) +"—à—Ç.):\n" + str(outpt)))
            else:
                bot.reply_to(message, "–í –±–∞–∑–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ \"" + reqoutp +"\"")
        else:
            reason = dbexec(f"SELECT reason FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'")
            bot.reply_to(message, bannedusertext.replace("{reason}", reason[0][0]))
            return 0;
    
    elif message.text.startswith("/create-reply "):
        bot.send_chat_action(message.chat.id, 'typing')
        if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'") == []:
            if "\n" in message.text:
                wtext = message.text.replace("/create-reply ", "").split("\n")[0].lower().strip()
                wttext = message.text.split("\n")[1]
                dbexec("INSERT INTO openhavroniya (inttxt, outtxt) VALUES (?, ?)", additional_parameters=[(wtext),(wttext)])
                bot.reply_to(message, "–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ!")
                new_replys += 1
            else:
                bot.reply_to(message, "–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.")
        else:
            reason = dbexec(f"SELECT reason FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'")
            bot.reply_to(message, bannedusertext.replace("{reason}", reason[0][0]))
            return 0;

    elif message.text.startswith("/delete-reply "):
        bot.send_chat_action(message.chat.id, 'typing')
        if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'") == []:
            deleted_replys += 1
            if "\n" in message.text:
                wtext = message.text.replace("/delete-reply ", "").split("\n")[0].lower().strip()
                wttext = message.text.split("\n")[1]
                delout = dbexec("DELETE FROM openhavroniya WHERE inttxt=? AND outtxt=?", additional_parameters=[(wtext),(wttext)])
                bot.reply_to(message, "–§—Ä–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")
        else:
            reason = dbexec(f"SELECT reason FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'")
            bot.reply_to(message, bannedusertext.replace("{reason}", reason[0][0]))
            return 0;
    else:
        if dbexec(f"SELECT userid FROM openhavroniya_block_users WHERE userid='{message.from_user.id}'") == []:
            poutp = dbexec("SELECT outtxt, photo FROM openhavroniya_photo WHERE inttxt=?", additional_parameters=[(message.text.lower())])
            outp = dbexec("SELECT outtxt FROM openhavroniya WHERE inttxt=?", additional_parameters=[(message.text.lower())])
            if poutp != [] or outp != []:
                bot.send_chat_action(message.chat.id, 'typing')
                if poutp == []:
                    outpp = []
                    for i in outp:
                        outpp.append(i[0])
                    try:
                        outm = random.choice(outpp)
                        outm = outm.replace("<first_name>", message.from_user.first_name)
                        outm = outm.replace("<user_id>",str(message.from_user.id))
                        if message.from_user.last_name == None:
                            outm = outm.replace("<last_name>", "")
                        else:
                            outm = outm.replace("<last_name>",message.from_user.last_name)
                        outm = outm.replace("<chat_id>", str(message.chat.id))
                        if message.from_user.username == None:
                            outm = outm.replace("<nickname>","")
                        else:
                            outm = outm.replace("<nickname>", message.from_user.username)
                        sends_replys += 1
                        bot.reply_to(message, outm)
                    except:
                        None
                elif outp == []:
                    messphfs = random.choice(poutp)
                    sends_photos += 1
                    if messphfs[0] == "":
                        with open("./photo-memory/" + messphfs[1], 'rb') as file:
                            bot.send_photo(message.chat.id, file, reply_to_message_id=message.message_id)
                    else:
                        with open("./photo-memory/" + messphfs[1], 'rb') as file:
                            bot.send_photo(message.chat.id, file, reply_to_message_id=message.message_id, caption=str(messphfs[0]))
                else:
                    if random.randint(1, 2) == 1:
                        outpp = []
                        for i in outp:
                            outpp.append(i[0])
                        try:
                            outm = random.choice(outpp)
                            outm = outm.replace("<first_name>", message.from_user.first_name)
                            outm = outm.replace("<user_id>",str(message.from_user.id))
                            if message.from_user.last_name == None:
                                outm = outm.replace("<last_name>", "")
                            else:
                                outm = outm.replace("<last_name>",message.from_user.last_name)
                            outm = outm.replace("<chat_id>", str(message.chat.id))
                            if message.from_user.username == None:
                                outm = outm.replace("<nickname>","")
                            else:
                                outm = outm.replace("<nickname>", message.from_user.username)
                            sends_replys += 1
                            bot.reply_to(message, outm)
                        except:
                            None
                    else:
                        messphfs = random.choice(poutp)
                        sends_photos += 1
                        if messphfs[0] == "":
                            with open("./photo-memory/" + messphfs[1], 'rb') as file:
                                bot.send_photo(message.chat.id, file, reply_to_message_id=message.message_id)
                        else:
                            with open("./photo-memory/" + messphfs[1], 'rb') as file:
                                bot.send_photo(message.chat.id, file, reply_to_message_id=message.message_id, caption=str(messphfs[0]))
while True:
    try:
        bot.infinity_polling()
    except Exception as e:
        print("error: " + str(e))
